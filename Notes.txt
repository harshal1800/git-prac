### **Git & GitHub: Simple Guide**  

#### **What is Git?**  
Git is a version control system that tracks changes in code, helping developers collaborate and manage projects efficiently.  

#### **What is GitHub?**  
GitHub is a cloud-based platform that hosts Git repositories, enabling collaboration, version control, and project management.  

---

### **Key Git Concepts:**  
- **Repository (Repo):** A storage for code and its history.  
- **Commit:** Saving changes in Git.  
- **Push:** Sending local commits to GitHub.  
- **Pull:** Fetching updates from GitHub to your local system.  
- **Branch:** A separate version of the project for new changes.  
- **Merge:** Combining branches.  
- **git checkout -b :** command is used to create and switch to a new branch in one step.
- **git checkout branch-name :** command is used to switch to an existing branch in Git.
- **Clone:** Copying a repository from GitHub to your local system.  
- **Fork:** Creating a copy of someone’s repo in your GitHub account.  
- **Staging Area:** A space where changes are prepared before committing.  
- **Remote Repository:** A Git repository stored on a server (like GitHub).  
- **Fetch:** Downloading changes from a remote repo without merging.  
- **Rebase:** Moving or combining commits in a different branch.  
- **Reset:** Undo changes by moving back to a previous commit.  
- **Cherry-Pick:** Applying specific commits from one branch to another.  
- **Gitignore:** A file that tells Git which files to ignore (e.g., logs, env files). 
- **ls :	Lists all visible files and directories in the current folder.
- **ls -a:	Lists all files, including hidden ones (files starting with . like .git). 

---

### **Key GitHub Features:**  
- **Issues:** Used to track bugs or feature requests.  
- **Pull Requests (PR):** A way to propose changes before merging them.  
- **Actions:** Automate workflows, like testing or deployment.  
- **Wiki:** Documentation space inside a GitHub repository.  
- **Projects:** A Kanban-style board for task management.  

*************************

Run the following commands to configure Git with your local Machine:  

git config --global user.name "harshal1800"
git config --global user.email "harshalchavhank18@gmail.com"


To verify the configuration, run:  
git config --global --list


********************

# Git Workflow

# 1. Whatever changes we make go to the staging area
git add .

# 2. After that, we commit those changes (save them locally)
git commit -m "Your commit message"

# 3. Then, we push those changes to our remote repository (GitHub)
git push origin main  # Use 'main' or 'master' depending on your branch

********************

# 1. Check the status of your repository
git status  

# 2. Stage changes (move files to the staging area)
git add .  # Stages all changes
# OR
git add filename  # Stages a specific file

# 3. Commit changes (save them locally)
git commit -m "Your commit message"

# 4. Push changes to the remote repository (GitHub)
git push origin main  # Use 'main' or 'master' depending on your branch

# 5. Pull latest changes from remote (if needed)
git pull origin main  # Sync your local repo with GitHub

# 6. Clone a repository (if you haven't already)
git clone https://github.com/your-username/repository-name.git

# 7. View Git history
git log  # Shows commit history

************************

The git log : command shows the history of commits in your repository.

U : Untracked file
M : Modified file

***************
```sh
# Undo last commit but keep changes staged
git reset --soft HEAD~1  

# Undo last commit and unstage changes (default)
git reset HEAD~1  

# Undo last commit and delete all changes permanently (⚠ irreversible)
git reset --hard HEAD~1  

# Unstage changes (after `git add .`)
git reset HEAD  
```

***************************

### **Add a Local Project to a Remote GitHub Repository**  

Follow these steps to push your local project to GitHub:  

```sh
# 1. Navigate to your project folder
cd your-project-folder  

# 2. Initialize Git (if not already initialized)
git init  

# 3. Add all files to the staging area
git add .  

# 4. Commit the changes
git commit -m "Initial commit"  

# 5. Add the remote repository (replace with your repo URL)
git remote add origin https://github.com/your-username/your-repo.git  

# 6. Push the project to GitHub
git push -u origin main  # Use 'main' or 'master' depending on your branch
```

***************************

### **Branching and Merging in Git**  

#### **1️⃣ Create a New Branch (Branching)**  
```sh
git branch branch-name   # Create a new branch
git checkout branch-name # Switch to the new branch
# OR (shortcut)
git checkout -b branch-name
```

#### **2️⃣ View All Branches**  
```sh
git branch
```

#### **3️⃣ Merge a Branch into `main` (Merging)**  
```sh
git checkout main       # Switch to main branch
git merge branch-name   # Merge the branch into main
```

#### **4️⃣ Delete a Branch**  
```sh
git branch -d branch-name  # Delete the branch (if merged)
git branch -D branch-name  # Force delete (even if not merged)
```

******************

